/**
 * Problem 2: Even Fibonacci numbers
 * <p>
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
 * find the sum of the even-valued terms.
 * <p>
 * Created by thomasalm on 01/04/15.
 */
public class Problem_2 {

    private static final int LIMIT = 4000000;

    public static void main(String[] args) {
        System.out.println("The solution to Problem 2 is: " + calculateSumEvenFibonacci());
        System.out.println("This also does it even faster: " + calculateEvenFibnnachiSemiPro());
        System.out.println("This one takes it even further: " + calculateEvenFibonnacchi());
    }

    /**
     * Brute Forcing - 31 Cycles
     *
     * @return
     */
    private static long calculateSumEvenFibonacci() {

        long sum = 0, currentNumber = 2, lastNumber = 1, holder;

        while (currentNumber < LIMIT) {
            if (currentNumber % 2 == 0) {
                sum += currentNumber;
            }
            holder = currentNumber;
            currentNumber += lastNumber;
            lastNumber = holder;
        }

        return sum;
    }

    /**
     * http://www.mathblog.dk/project-euler-problem-2/
     * <p>
     * But it turns out that we can skip all the odd numbers
     * If we look at the Fibonacci sequence: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89
     * We may notice the pattern that every third number is even starting at F3,
     * so if we can express Fn in terms of Fn-3, Fn-6 then we only have to deal with even numbers
     * <p>
     * Fn = Fn-1 + Fn-2 =
     * Fn-2 + Fn-3 + Fn-3 +Fn-4 = (since Fn-1 = Fn-2 + Fn-3 and so on)
     * Fn-3 + Fn-4 + Fn-3 +Fn-3 +Fn-4 = 3Fn-3 + 2Fn-4 =
     * 3Fn-3 + Fn-4 + Fn-5 + Fn-6) =
     * 4Fn-3 + Fn-6 (since Fn-4 + Fn-5 = Fn-3)
     */
    private static long calculateEvenFibnnachiSemiPro() {

        long sum = 0, result = 2, fib3 = 2, fib6 = 0;

        while (result < LIMIT) {
            sum += result;
            result = 4 * fib3 + fib6;
            fib6 = fib3;
            fib3 = result;
        }

        return sum;
    }

    /**
     * Reducing the number of write operations.
     * The while loop does a total of 11 iterations
     * And each operations consists of the following operations
     * <p>
     * Iteration 1:
     * f[0] = 2
     * sum += 2
     * i = 1
     * f[1] = 4 * f[0] + f[1] = 8
     * <p>
     * Iteration 2:
     * sum += 8
     * i = 0
     * f[0] = 4 * f[1] + f[0] = 34
     */
    private static long calculateEvenFibonnacchi() {
        long[] fib = {2, 0};
        int i = 0;
        long sum = 0;
        while (fib[i] < LIMIT) {
            sum += fib[i];
            i = (i + 1) % 2;
            fib[i] = 4 * fib[(i + 1) % 2] + fib[i];
        }
        return sum;
    }


}
